#usda 1.0
(
    defaultPrim = "pCylinder1"
    endTimeCode = 0
    framesPerSecond = 24
    startTimeCode = 0
    timeCodesPerSecond = 1
    upAxis = "Y"
)

def Mesh "pCylinder1"
{
    float3[] extent.timeSamples = {
        0: [(-1.0000002, -1, -1.0000005), (1, 1, 1.0000001)],
    }
    int[] faceVertexCounts.timeSamples = {
        0: [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
    }
    int[] faceVertexIndices.timeSamples = {
        0: [20, 21, 1, 0, 21, 22, 2, 1, 22, 23, 3, 2, 23, 24, 4, 3, 24, 25, 5, 4, 25, 26, 6, 5, 26, 27, 7, 6, 27, 28, 8, 7, 28, 29, 9, 8, 29, 30, 10, 9, 30, 31, 11, 10, 31, 32, 12, 11, 32, 33, 13, 12, 33, 34, 14, 13, 34, 35, 15, 14, 35, 36, 16, 15, 36, 37, 17, 16, 37, 38, 18, 17, 38, 39, 19, 18, 39, 20, 0, 19, 40, 0, 1, 40, 1, 2, 40, 2, 3, 40, 3, 4, 40, 4, 5, 40, 5, 6, 40, 6, 7, 40, 7, 8, 40, 8, 9, 40, 9, 10, 40, 10, 11, 40, 11, 12, 40, 12, 13, 40, 13, 14, 40, 14, 15, 40, 15, 16, 40, 16, 17, 40, 17, 18, 40, 18, 19, 40, 19, 0, 41, 21, 20, 41, 22, 21, 41, 23, 22, 41, 24, 23, 41, 25, 24, 41, 26, 25, 41, 27, 26, 41, 28, 27, 41, 29, 28, 41, 30, 29, 41, 31, 30, 41, 32, 31, 41, 33, 32, 41, 34, 33, 41, 35, 34, 41, 36, 35, 41, 37, 36, 41, 38, 37, 41, 39, 38, 41, 20, 39],
    }
    normal3f[] normals (
        interpolation = "faceVarying"
    )
    normal3f[] normals.timeSamples = {
        0: [(0.9510568, 0, -0.309016), (0.8090169, 0, -0.5877853), (0.8090169, 0, -0.5877853), (0.9510568, 0, -0.309016), (0.8090169, 0, -0.5877853), (0.5877851, 0, -0.80901706), (0.5877851, 0, -0.80901706), (0.8090169, 0, -0.5877853), (0.5877851, 0, -0.80901706), (0.3090168, 0, -0.95105654), (0.3090168, 0, -0.95105654), (0.5877851, 0, -0.80901706), (0.3090168, 0, -0.95105654), (-9.209559e-8, 0, -1), (-9.209559e-8, 0, -1), (0.3090168, 0, -0.95105654), (-9.209559e-8, 0, -1), (-0.3090171, 0, -0.9510564), (-0.3090171, 0, -0.9510564), (-9.209559e-8, 0, -1), (-0.3090171, 0, -0.9510564), (-0.5877854, 0, -0.80901676), (-0.5877854, 0, -0.80901676), (-0.3090171, 0, -0.9510564), (-0.5877854, 0, -0.80901676), (-0.80901706, 0, -0.58778507), (-0.80901706, 0, -0.58778507), (-0.5877854, 0, -0.80901676), (-0.80901706, 0, -0.58778507), (-0.9510565, 0, -0.30901688), (-0.9510565, 0, -0.30901688), (-0.80901706, 0, -0.58778507), (-0.9510565, 0, -0.30901688), (-1, 0, 0), (-1, 0, 0), (-0.9510565, 0, -0.30901688), (-1, 0, 0), (-0.9510566, 0, 0.30901706), (-0.9510566, 0, 0.30901706), (-1, 0, 0), (-0.9510566, 0, 0.30901706), (-0.809017, 0, 0.5877855), (-0.809017, 0, 0.5877855), (-0.9510566, 0, 0.30901706), (-0.809017, 0, 0.5877855), (-0.58778524, 0, 0.8090171), (-0.58778524, 0, 0.8090171), (-0.809017, 0, 0.5877855), (-0.58778524, 0, 0.8090171), (-0.30901694, 0, 0.9510566), (-0.30901694, 0, 0.9510566), (-0.58778524, 0, 0.8090171), (-0.30901694, 0, 0.9510566), (9.2095654e-8, 0, 1.0000001), (9.2095654e-8, 0, 1.0000001), (-0.30901694, 0, 0.9510566), (9.2095654e-8, 0, 1.0000001), (0.30901703, 0, 0.9510565), (0.30901703, 0, 0.9510565), (9.2095654e-8, 0, 1.0000001), (0.30901703, 0, 0.9510565), (0.5877853, 0, 0.809017), (0.5877853, 0, 0.809017), (0.30901703, 0, 0.9510565), (0.5877853, 0, 0.809017), (0.809017, 0, 0.5877853), (0.809017, 0, 0.5877853), (0.5877853, 0, 0.809017), (0.809017, 0, 0.5877853), (0.9510566, 0, 0.309017), (0.9510566, 0, 0.309017), (0.809017, 0, 0.5877853), (0.9510566, 0, 0.309017), (0.99999994, 0, 9.593293e-7), (0.99999994, 0, 9.593293e-7), (0.9510566, 0, 0.309017), (0.99999994, 0, 9.593293e-7), (0.9510568, 0, -0.309016), (0.9510568, 0, -0.309016), (0.99999994, 0, 9.593293e-7), (0, -0.99999994, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1.0000001, 0), (0, -0.99999994, 0), (0, -1.0000001, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1.0000001, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1.0000001, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0)],
    }
    uniform token orientation = "leftHanded"
    point3f[] points (
        interpolation = "vertex"
    )
    point3f[] points.timeSamples = {
        0: [(0.95105714, -1, -0.30901718), (0.80901754, -1, -0.5877856), (0.5877856, -1, -0.8090175), (0.30901715, -1, -0.951057), (0, -1, -1.0000005), (-0.30901715, -1, -0.95105696), (-0.5877855, -1, -0.8090173), (-0.80901724, -1, -0.5877854), (-0.9510568, -1, -0.30901706), (-1.0000002, -1, 0), (-0.9510568, -1, 0.30901706), (-0.8090172, -1, 0.58778536), (-0.58778536, -1, 0.8090171), (-0.30901706, -1, 0.95105666), (-2.9802322e-8, -1, 1.0000001), (0.30901697, -1, 0.9510566), (0.58778524, -1, 0.80901706), (0.809017, -1, 0.5877853), (0.95105654, -1, 0.309017), (1, -1, 0), (0.95105714, 1, -0.30901718), (0.80901754, 1, -0.5877856), (0.5877856, 1, -0.8090175), (0.30901715, 1, -0.951057), (0, 1, -1.0000005), (-0.30901715, 1, -0.95105696), (-0.5877855, 1, -0.8090173), (-0.80901724, 1, -0.5877854), (-0.9510568, 1, -0.30901706), (-1.0000002, 1, 0), (-0.9510568, 1, 0.30901706), (-0.8090172, 1, 0.58778536), (-0.58778536, 1, 0.8090171), (-0.30901706, 1, 0.95105666), (-2.9802322e-8, 1, 1.0000001), (0.30901697, 1, 0.9510566), (0.58778524, 1, 0.80901706), (0.809017, 1, 0.5877853), (0.95105654, 1, 0.309017), (1, 1, 0), (0, -1, 0), (0, 1, 0)],
    }
    uniform token subdivisionScheme = "none"
}

